package rainz;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;
import java.util.*;

import org.w3c.dom.*;
//import org.w3c.dom.xpath.XPathExpression;
import org.xml.sax.*;
import javax.xml.xpath.*;
import javax.xml.parsers.*;

public class Collada {
  
  class GlobalState {
    public HashMap<String, ColladaObject> allIDs = new HashMap<String, ColladaObject>();
    
    public ColladaObject getObjectFromURL(String url)
    {
      if (url == null)
        return null;
      StringBuffer url_buf = new StringBuffer(url);
      if (url_buf.charAt(0) == '#')
      {
        url_buf.deleteCharAt(0);
        return allIDs.get(url_buf.toString());
      }
      return null;
    }
  }
  
  GlobalState globalState = new GlobalState();
  
  class ColladaFactory {
    private HashMap<String, String> m_collada_classes = new HashMap<String, String>();
    public ColladaFactory()
    {
      m_collada_classes.put("COLLADA", "ColladaRoot");
      
      m_collada_classes.put("library_geometries", "ColladaGeometry");
      m_collada_classes.put("instance_geometry", "ColladaGeometry");
      m_collada_classes.put("geometry", "ColladaGeometry");
      m_collada_classes.put("mesh", "ColladaMesh");
      m_collada_classes.put("vertices", "ColladaVertices");
      m_collada_classes.put("polylist", "ColladaPolyList");
      m_collada_classes.put("triangles", "ColladaTriangles");
      m_collada_classes.put("vcount", "ColladaVCount");
      m_collada_classes.put("p", "ColladaP");
      
      m_collada_classes.put("library_visual_scenes", "ColladaVisualScene");
      m_collada_classes.put("instance_visual_scene", "ColladaVisualScene");
      m_collada_classes.put("visual_scene", "ColladaVisualScene");
      m_collada_classes.put("scene", "ColladaScene");
      
      m_collada_classes.put("technique", "ColladaTechnique");
      m_collada_classes.put("technique_common", "ColladaTechnique");
      m_collada_classes.put("accessor", "ColladaAccessor");
      m_collada_classes.put("param", "ColladaParam");
      
      m_collada_classes.put("node", "ColladaNode");
      m_collada_classes.put("source", "ColladaSource");
      m_collada_classes.put("input", "ColladaInput");
      m_collada_classes.put("float_array", "ColladaFloatArray");
      m_collada_classes.put("int_array", "ColladaIntArray");
      
    }
    
    public ColladaObject createColladaObject(Element element)
    {
      String tag = element.getTagName();
      String cls_name = m_collada_classes.get(tag);
      if (cls_name == null)
      {
        System.out.println("Skipping " + tag);
        return null;
      }
      //System.out.println("Creating " + tag);
      
      String full_class_name = "rainz.Collada$" + cls_name;
      Class<? extends ColladaObject> cls;
      try
      {
        cls = Class.forName(full_class_name).asSubclass(ColladaObject.class);
      } catch (ClassNotFoundException e)
      {
        System.out.println("Cannot find class " + full_class_name);
        return null;
      }

      ColladaObject obj;

      if (tag.startsWith("library_"))
      {
        ColladaLibrary lib = new ColladaLibrary();
        lib.object_class = cls;
        obj = lib;
      }
      else if (tag.startsWith("instance_"))
      {
        ColladaInstance inst = new ColladaInstance();
        inst.object_class = cls;
        obj = inst;
      }
      else
      {
        java.lang.reflect.Constructor<? extends ColladaObject> co;
        try
        {
          co = cls.getConstructor(new Class[] { Collada.class });
        } catch (Exception e)
        {
          System.out.println("Unable to get constructor for " + full_class_name);
          return null;
        }
        try
        {
          obj = co.newInstance(Collada.this);
        } catch (Exception e)
        {
          System.out.println("Cannot create instance of " + full_class_name);
          return null;
        }
      }

      obj.xml_element = element;
      obj.id = element.getAttribute("id");
      if (!obj.id.equals(""))
        globalState.allIDs.put(obj.id, obj);
      obj.processSelf();
      return obj;
    }
    
  }
  
  ColladaFactory colladaFactory = new ColladaFactory();
  
  abstract public class ColladaObject {
    public ColladaObject() {}
 
    public String id;
    public Element xml_element;
 
    public boolean checkTag(String tag)
    {
      return (tag.equals(xml_element.getTagName()));
    }
    
    protected void processSelf() {}
    protected void processChild(ColladaObject child){}
    
    final protected void visitChildren()
    {
      NodeList children = xml_element.getChildNodes();      
      for (int i = 0; i < children.getLength(); ++i)
      {
        Node node = children.item(i);
        if (node.getNodeType() != Node.ELEMENT_NODE) {
          continue;
        }
        ColladaObject child = colladaFactory.createColladaObject((Element)node);
        if (child == null)
          continue;
        child.visitChildren();
        processChild(child);
      }
      
      return;
    }
 
  }
  
  abstract public class ColladaParameterizedObject extends ColladaObject {
    protected Class<?> object_class;

    public boolean typeCheck(ColladaObject value)
    {
      return value.getClass().equals(object_class);
    }
  }
  
  public class ColladaRoot extends ColladaObject {
    public ColladaRoot () {}
 
    public ColladaLibrary lib_geometries;
    public ColladaLibrary lib_visual_scenes;
    public ColladaScene scene;    
    
    @Override
    protected void processChild(ColladaObject child)
    {
      if (child instanceof ColladaLibrary) {
        if (child.checkTag("library_geometries"))
        {
          if (lib_geometries == null)
            lib_geometries = (ColladaLibrary)child;
          else
            lib_geometries.putAll((ColladaLibrary)child);
        }
        else if (child.checkTag("library_visual_scenes"))
        {
          if (lib_visual_scenes == null)
            lib_visual_scenes = (ColladaLibrary)child;
          else
            lib_visual_scenes.putAll(((ColladaLibrary)child));
        }
      }
      else if (child instanceof ColladaScene)
        scene = (ColladaScene)child;
    }
  }
  
  public class ColladaLibrary extends ColladaParameterizedObject {
    private HashMap<String, ColladaObject> m_objects = new HashMap<String, ColladaObject>();
    
    public ColladaObject get(String key)
    {
      return m_objects.get(key);
    }
    
    public ColladaObject put(String key, ColladaObject value)
    {
      if (typeCheck(value))
        return m_objects.put(key,value);
      System.out.println("Adding a "+value.getClass().getName()+
                          " to a library for "+object_class.getName());
      return null;
        
    }
    
    public void putAll(ColladaLibrary lib)
    {
      m_objects.putAll(lib.m_objects);
    }
    
    @Override
    public void processChild(ColladaObject child)
    {
      if (typeCheck(child) == false)
        return;
      if (child.id == null)
      {
        System.out.println("Library: id-less child:"+child.xml_element.getTagName());
        return;
      }
      m_objects.put(child.id, child);
    }
    
  }
  
  public class ColladaInstance extends ColladaParameterizedObject {
    private HashMap<String, ColladaObject> m_additional = new HashMap<String, ColladaObject>();
    
    public ColladaObject prototype;
    
    public ColladaObject get(String key)
    {
      return m_additional.get(key);
    }
    
    public ColladaObject put(String key, ColladaObject value)
    {
      return m_additional.put(key,value);
    }
    
    @Override
    public void processChild(ColladaObject child)
    {
      m_additional.put(child.xml_element.getTagName(), child);
    }
    
    @Override
    public void processSelf()
    {
      ColladaObject type = globalState.getObjectFromURL(xml_element.getAttribute("url"));
      if (type == null)
        return;
      
      if (typeCheck(type))
        prototype = type;
      else
        System.out.println("Instantiating a "+type.getClass().getName()+
                           " for "+object_class.getName());
    }
  }

  public class ColladaScene extends ColladaObject {
    ColladaInstance visual_scene;
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaInstance) {
        if (child.checkTag("instance_visual_scene"))
          visual_scene = (ColladaInstance)child;
      }
    }
  }
  
  public class ColladaNode extends ColladaObject {
    
  }
  
  class ColladaFloatArrayBase extends ColladaObject {
    public float values[];
    @Override
    public void processSelf()
    {
      int count;
      String value_str = xml_element.getFirstChild().getNodeValue();
      String [] tokens = value_str.split(" ");
      String attr = xml_element.getAttribute("count");
      if (!attr.equals(""))
        count = Integer.parseInt(attr);
      else
        count = tokens.length;
      values = new float[count];
      for (int i = 0; i < count; ++i)
        values[i] = Float.parseFloat(tokens[i]);
    }
  }
  
  class ColladaIntArrayBase extends ColladaObject {
    public int values[];
    @Override
    public void processSelf()
    {
      int count;
      String value_str = xml_element.getFirstChild().getNodeValue();
      String [] tokens = value_str.split(" ");
      String attr = xml_element.getAttribute("count");
      if (!attr.equals(""))
        count = Integer.parseInt(attr);
      else
        count = tokens.length;
      values = new int[count];
      for (int i = 0; i < count; ++i)
        values[i] = Integer.parseInt(tokens[i]);
    }
  }
  
  public class ColladaFloatArray extends ColladaFloatArrayBase {  
  }

  public class ColladaIntArray extends ColladaIntArrayBase {  
  }
  
  public class ColladaParam extends ColladaObject {
    public String name;
    public String sid;
    public String type;
    public String semantic;
    @Override
    public void processSelf()
    {
      name = xml_element.getAttribute("name");
      sid = xml_element.getAttribute("sid");
      type = xml_element.getAttribute("type");
      semantic = xml_element.getAttribute("semantic");
    }
  }
  
  public class ColladaAccessor extends ColladaObject {
    public int count = 0;
    public int offset = 0;
    public ColladaObject source;
    public int stride = 1;
    public HashMap<String, ColladaParam> items = new HashMap<String, ColladaParam>();
    @Override
    public void processSelf()
    {
      String attr = xml_element.getAttribute("count");
      if (!attr.equals(""))
        count = Integer.parseInt(attr);
      attr = xml_element.getAttribute("offset");
      if (!attr.equals(""))
        offset = Integer.parseInt(attr);
      attr = xml_element.getAttribute("stride");
      if (!attr.equals(""))
        stride = Integer.parseInt(attr);
      attr = xml_element.getAttribute("source");
      source = globalState.getObjectFromURL(attr);
    }
    
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaParam)
        items.put(child.xml_element.getTagName(), (ColladaParam)child);
    }
  }
  
  public class ColladaTechnique extends ColladaObject {
    public HashMap<String, ColladaObject> items = new HashMap<String, ColladaObject>();
    @Override
    public void processChild(ColladaObject child)
    {
      items.put(child.xml_element.getTagName(), child);
    }
  }
  
  public class ColladaSource extends ColladaObject {
    public ColladaFloatArray float_array;
    public ColladaTechnique technique;    
    
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaFloatArray)
        float_array = (ColladaFloatArray)child;
      else if (child instanceof ColladaTechnique)
        technique = (ColladaTechnique)child;
    }
  }
  
  public class ColladaInput extends ColladaObject {
    public String semantic;
    public ColladaObject source;
    public int offset = 0;
    public int set = 0;
    @Override
    public void processSelf()
    {
      String tmp_str = xml_element.getAttribute("source");
      source = (ColladaObject)globalState.getObjectFromURL(tmp_str);

      semantic = xml_element.getAttribute("semantic");
      
      tmp_str = xml_element.getAttribute("offset");
      if (!tmp_str.equals(""))
        offset = Integer.parseInt(tmp_str);
      
      tmp_str = xml_element.getAttribute("set");
      if (!tmp_str.equals(""))
        set = Integer.parseInt(tmp_str);
    }
  }
  
  public class ColladaVisualScene extends ColladaObject {
    public HashMap<String, ColladaNode> nodes = new HashMap<String, ColladaNode>();
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaNode)
        nodes.put(child.id, (ColladaNode)child);
    }
    
  }
  
  public class ColladaVertices extends ColladaObject {
    public HashMap<String, ColladaInput> inputs = new HashMap<String, ColladaInput>();
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaInput)
      {
        ColladaInput input = (ColladaInput)child; 
        inputs.put(input.semantic, input);
      }
    }
  }
  
  
  public interface ColladaPrimitive {
  }
  
  public class ColladaVCount extends ColladaIntArrayBase {    
  }
  public class ColladaP extends ColladaIntArrayBase {    
  }
  
  
  public class ColladaPolyList extends ColladaObject implements ColladaPrimitive {
    public int count = 0;
    public String material;
    public ColladaVCount vcount;
    public ColladaP p;
    public HashMap<String, ColladaInput> inputs = new HashMap<String, ColladaInput>();
    
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaVCount)
        vcount = (ColladaVCount)child;
      else if (child instanceof ColladaP)
        p = (ColladaP)child;
      else if (child instanceof ColladaInput)
      {
        ColladaInput inp = (ColladaInput)child;
        if (!inp.semantic.equals(""))
          inputs.put(inp.semantic, inp);
      }
    }
    
    @Override
    public void processSelf()
    {
      String attr = xml_element.getAttribute("count");
      if (!attr.equals(""))
        count = Integer.parseInt(attr);
      material = xml_element.getAttribute("material");
    }
  }

  public class ColladaTriangles extends ColladaObject implements ColladaPrimitive {
    public int count = 0;
    public String material;
    public ColladaP p;
    public HashMap<String, ColladaInput> inputs = new HashMap<String, ColladaInput>();
    
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaP)
        p = (ColladaP)child;
      else if (child instanceof ColladaInput)
      {
        ColladaInput inp = (ColladaInput)child;
        if (!inp.semantic.equals(""))
          inputs.put(inp.semantic, inp);
      }
    }
    
    @Override
    public void processSelf()
    {
      String attr = xml_element.getAttribute("count");
      if (!attr.equals(""))
        count = Integer.parseInt(attr);
      material = xml_element.getAttribute("material");
    }
  }
  
  public class ColladaMesh extends ColladaObject {
    public HashMap<String, ColladaSource> sources = new HashMap<String, ColladaSource>();
    public ColladaVertices vertices;
    public ArrayList<ColladaPrimitive> primitives = new ArrayList<ColladaPrimitive>();
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaSource)
        sources.put(child.id, (ColladaSource)child);
      else if (child instanceof ColladaVertices)
        vertices = (ColladaVertices)child;
      else if (child instanceof ColladaPrimitive)
        primitives.add((ColladaPrimitive)child);
    }
  }
  
  public class ColladaGeometry extends ColladaObject {
    public ColladaMesh mesh;
    @Override
    public void processChild(ColladaObject child)
    {
      if (child instanceof ColladaMesh)
        mesh = (ColladaMesh)child;
    }
    
  }

  public ColladaRoot loadCollada(String fileName) throws SAXException,
  IOException, ParserConfigurationException
  {
    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document document = builder.parse(fileName);
    Element docElement = document.getDocumentElement();
    ColladaObject rootObject = colladaFactory.createColladaObject(docElement);
    rootObject.visitChildren();
    return (ColladaRoot)rootObject;
  }
  
  private XPathFactory m_xpath_factory = XPathFactory.newInstance();
  
  public class GeometryData {
    public FloatBuffer positions;
    public FloatBuffer normals;
    public FloatBuffer texCoords;
    public ShortBuffer vertexIndices;
    public ShortBuffer texIndices;
    
    public void print()
    {
      int count = positions.limit();
      System.out.println("float positions["+count+"] = {");
      for (int i = 0; i < count; ++i)
        System.out.print(positions.get(i)+",");
      System.out.println("};");
      count = normals.limit();
      System.out.println("float normals["+count+"] = {");
      for (int i = 0; i < count; ++i)
        System.out.print(normals.get(i)+",");
      System.out.println("};");
      count = texCoords.limit();
      System.out.println("float texCoords["+count+"] = {");
      for (int i = 0; i < count; ++i)
        System.out.print(texCoords.get(i)+",");
      System.out.println("};");
      count = vertexIndices.limit();
      System.out.println("short vertexIndices["+count+"] = {");
      for (int i = 0; i < count; ++i)
        System.out.print(vertexIndices.get(i)+",");
      System.out.println("};");
      count = texIndices.limit();
      System.out.println("short texIndices["+count+"] = {");
      for (int i = 0; i < count; ++i)
        System.out.print(texIndices.get(i)+",");
      System.out.println("};");
      System.out.println();
    }
  }
  
  public ArrayList<GeometryData> loadCollada_old(String fileName) throws SAXException,
    IOException, XPathExpressionException, ParserConfigurationException
  {
    ArrayList<GeometryData> geoDataArray = new ArrayList<GeometryData>();
    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document document = builder.parse(fileName);
    XPath xpath = m_xpath_factory.newXPath();
    XPathExpression expr = xpath.compile("/COLLADA/library_geometries/geometry");
    Object result = expr.evaluate(document, XPathConstants.NODESET);
    NodeList nodes = (NodeList)result;
    for (int i = 0; i < nodes.getLength(); ++i)
    {
      GeometryData geoData = new GeometryData();
      Element element = (Element)nodes.item(i);
      ColladaGeometry geo = (ColladaGeometry)colladaFactory.createColladaObject(element);
      geo.visitChildren();
      for (ColladaPrimitive primitive: geo.mesh.primitives)
      {
        ColladaTriangles triangles = (ColladaTriangles)primitive;
        short [] vertexIndices = new short[triangles.p.values.length/2];
        short [] texIndices = new short[triangles.p.values.length/2];
        for (int idx = 0; idx < triangles.p.values.length; idx += 2)
        {
          vertexIndices[idx/2] = (short) triangles.p.values[idx];
          texIndices[idx/2] = (short) triangles.p.values[idx+1];
        }
        geoData.vertexIndices = getShortBufferForArray(vertexIndices);
        geoData.texIndices = getShortBufferForArray(texIndices);
        ColladaInput inp = triangles.inputs.get("TEXCOORD");
        ColladaSource src;
        if (inp != null)
        {
          src = (ColladaSource) inp.source;
          geoData.texCoords = getFloatBufferForArray(src.float_array.values);
        }
        else
        {
          geoData.texCoords = getFloatBufferForArray(new float[0]);
        }
        src = (ColladaSource) geo.mesh.vertices.inputs.get("POSITION").source;
        swapAxes(src.float_array.values);
        geoData.positions = getFloatBufferForArray(src.float_array.values);
        src = (ColladaSource) geo.mesh.vertices.inputs.get("NORMAL").source;
        geoData.normals = getFloatBufferForArray(src.float_array.values);
        geoDataArray.add(geoData);
        geoData.print();
      }
      /*
      String geo_id = element.getAttribute("id");
      System.out.println(geo_id);
      expr = xpath.compile("mesh/source");
      result = expr.evaluate(element, XPathConstants.NODESET);
      NodeList arrays = (NodeList)result;
      for (int j = 0; j < arrays.getLength(); ++j)
      {
        Element src = (Element)arrays.item(j);
        ColladaSource src_obj = (ColladaSource)colladaFactory.createColladaObject(src);
        src_obj.visitChildren();
        System.out.println("Float count for source "+src_obj.id+":"+src_obj.float_array.values.length);
      }
      */
    }
    
    return geoDataArray;
  }

  public static FloatBuffer getFloatBuffer(int num_floats)
  {
    ByteBuffer fb = ByteBuffer.allocateDirect(num_floats*4);
    fb.order(ByteOrder.nativeOrder());
    FloatBuffer float_buffer = fb.asFloatBuffer();
    return float_buffer;
  }

  public static FloatBuffer getFloatBufferForArray(float [] array)
  {
    FloatBuffer buf = getFloatBuffer(array.length);
    buf.put(array);
    buf.position(0);
    return buf;
  }

  public static ShortBuffer getShortBuffer(int num_shorts)
  {
    ByteBuffer sb = ByteBuffer.allocateDirect(num_shorts*2);
    sb.order(ByteOrder.nativeOrder());
    ShortBuffer short_buffer = sb.asShortBuffer();
    return short_buffer;
  }
  
  public static ShortBuffer getShortBufferForArray(short [] array)
  {
    ShortBuffer buf = getShortBuffer(array.length);
    buf.put(array);
    buf.position(0);
    return buf;
  }
  

  public static void centerPostionsFloat(float [] array)
  {
    float minX = Float.MAX_VALUE, maxX = Float.MIN_VALUE;
    float minY = Float.MAX_VALUE, maxY = Float.MIN_VALUE;
    float minZ = Float.MAX_VALUE, maxZ = Float.MIN_VALUE;
    for (int i = 0; i < array.length/3; ++i)
    {
      float x = array[3*i];
      float y = array[3*i+1];
      float z = array[3*i+2];
      if (x < minX)
        minX = x;
      if (x > maxX)
        maxX = x;
      if (y < minY)
        minY = y;
      if (y > maxY)
        maxY = y;
      if (z < minZ)
        minZ = z;
      if (z > maxZ)
        maxZ = z;
    }
    float centerX = (maxX + minX) / 2;
    float centerY = (maxY + minY) / 2;
    float centerZ = (maxZ + minZ) / 2;
    for (int i = 0; i < array.length/3; ++i)
    {
      array[3*i] -= centerX;
      array[3*i+1] -= centerY;
      array[3*i+2] -= centerZ;
    }
  }

  public static void swapAxes(float [] array)
  {
    for (int i = 0; i < array.length/3; ++i)
    {
      float temp = array[3*i+1];
      array[3*i+1] = array[3*i+2];
      array[3*i+2] = -temp;
    }
  }
}
